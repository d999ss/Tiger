name: QA Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  qa-tests:
    name: Run QA Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('qa-automation/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd qa-automation
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run asset verification
      run: |
        cd qa-automation
        python check_assets.py || true
        
    - name: Run test setup verification
      run: |
        cd qa-automation
        python test_setup.py
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: qa-test-results-py${{ matrix.python-version }}
        path: qa-automation/reports/
        retention-days: 30

  browser-tests:
    name: Browser Compatibility Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install Python dependencies
      run: |
        cd qa-automation
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node dependencies
      run: |
        cd qa-automation
        if [ -f package.json ]; then
          npm install
        fi
        
    - name: Run browser tests
      run: |
        cd qa-automation
        python browser_qa.py || true
        
    - name: Upload browser test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: browser-test-results
        path: |
          qa-automation/screenshots/
          qa-automation/reports/
        retention-days: 30

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd qa-automation
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run visual QA tests
      run: |
        cd qa-automation
        python visual_qa.py || true
        
    - name: Upload visual test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: visual-test-results
        path: qa-automation/screenshots/
        retention-days: 30

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check HTML files
      run: |
        echo "Checking HTML files..."
        find . -name "*.html" -type f | wc -l
        
    - name: Check CSS files
      run: |
        echo "Checking CSS files..."
        find . -name "*.css" -type f | wc -l
        
    - name: Check JavaScript files
      run: |
        echo "Checking JavaScript files..."
        find . -name "*.js" -type f | wc -l
        
    - name: Check for broken symlinks
      run: |
        echo "Checking for broken symlinks..."
        find . -type l ! -exec test -e {} \; -print | tee broken-symlinks.txt
        if [ -s broken-symlinks.txt ]; then
          echo "Found broken symlinks!"
          cat broken-symlinks.txt
          exit 1
        fi
        
    - name: Check file permissions
      run: |
        echo "Checking shell scripts are executable..."
        find . -name "*.sh" -type f ! -executable || true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [qa-tests, browser-tests, visual-regression, code-quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify all required files exist
      run: |
        echo "Checking for required files..."
        files=(
          "README.md"
          "LICENSE"
          "CONTRIBUTING.md"
          ".gitignore"
        )
        
        for file in "${files[@]}"; do
          if [ -f "$file" ]; then
            echo "âœ“ $file exists"
          else
            echo "âœ— $file missing"
            exit 1
          fi
        done
        
    - name: Check website directories
      run: |
        echo "Verifying company website directories..."
        dirs=(
          "tigerbiosciences.com"
          "tiger-aesthetics.com"
          "tigerwoundcare.com"
          "sientra.com"
          "myaveli.com"
        )
        
        for dir in "${dirs[@]}"; do
          if [ -d "$dir" ]; then
            echo "âœ“ $dir directory exists"
            if [ -f "$dir/index.html" ]; then
              echo "  âœ“ index.html found"
            else
              echo "  âœ— index.html missing"
            fi
          else
            echo "âœ— $dir directory missing"
          fi
        done
        
    - name: Deployment ready
      run: |
        echo "ðŸš€ All checks passed! Ready for deployment."

