name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          Add
          Update
          Fix
          Remove
          Refactor
          Docs
          Style
          Test
          Chore
        requireScope: false
        
    - name: Check PR description
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        if [ -z "$PR_BODY" ] || [ "$PR_BODY" == "" ]; then
          echo "❌ PR description is empty. Please provide a description."
          exit 1
        fi
        echo "✓ PR description provided"
        
    - name: Check for TODO comments
      run: |
        echo "Checking for TODO comments in changed files..."
        TODO_COUNT=$(git diff origin/${{ github.base_ref }}...HEAD | grep -i "TODO\|FIXME\|XXX" | wc -l)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "⚠️  Found $TODO_COUNT TODO/FIXME comments in changes"
          git diff origin/${{ github.base_ref }}...HEAD | grep -i "TODO\|FIXME\|XXX"
          echo "Please resolve these before merging."
        else
          echo "✓ No TODO comments found"
        fi
        
    - name: Check file size
      run: |
        echo "Checking for large files..."
        LARGE_FILES=$(find . -type f -size +10M ! -path "./.git/*" ! -path "./qa-automation/screenshots/*")
        if [ -n "$LARGE_FILES" ]; then
          echo "⚠️  Large files detected (>10MB):"
          echo "$LARGE_FILES"
          echo "Consider compressing or using Git LFS for large files."
        else
          echo "✓ No large files detected"
        fi
        
    - name: Check for console.log statements
      run: |
        echo "Checking for console.log statements..."
        CONSOLE_LOGS=$(git diff origin/${{ github.base_ref }}...HEAD | grep -i "console\.log" | wc -l)
        if [ $CONSOLE_LOGS -gt 0 ]; then
          echo "⚠️  Found $CONSOLE_LOGS console.log statements"
          echo "Consider removing debug statements before merging."
        else
          echo "✓ No console.log statements found"
        fi

  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Label based on files changed
      uses: actions/labeler@v5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        configuration-path: .github/labeler.yml
        
    - name: Add size label
      uses: codelytv/pr-size-labeler@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        xs_label: 'size/xs'
        xs_max_size: '10'
        s_label: 'size/s'
        s_max_size: '100'
        m_label: 'size/m'
        m_max_size: '500'
        l_label: 'size/l'
        l_max_size: '1000'
        xl_label: 'size/xl'
        fail_if_xl: 'false'

  link-checker:
    name: Check Links
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Check for broken links in changed files
      run: |
        echo "Checking for broken links..."
        # Get changed HTML files
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.html$' || true)
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "No HTML files changed"
          exit 0
        fi
        
        echo "Changed HTML files:"
        echo "$CHANGED_FILES"
        
        # Check for common broken link patterns
        for file in $CHANGED_FILES; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            
            # Check for empty href
            EMPTY_HREF=$(grep -n 'href=""' "$file" || true)
            if [ -n "$EMPTY_HREF" ]; then
              echo "⚠️  Empty href found in $file:"
              echo "$EMPTY_HREF"
            fi
            
            # Check for empty src
            EMPTY_SRC=$(grep -n 'src=""' "$file" || true)
            if [ -n "$EMPTY_SRC" ]; then
              echo "⚠️  Empty src found in $file:"
              echo "$EMPTY_SRC"
            fi
          fi
        done
        
        echo "✓ Link check complete"

  comment-on-pr:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [validate-pr, auto-label, link-checker]
    if: always()
    permissions:
      pull-requests: write
    
    steps:
    - name: Add helpful comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('PR Validation Results');
          });
          
          const output = `## 🤖 PR Validation Results
          
          Thank you for your contribution! Here's a quick summary:
          
          - ✅ PR validation checks completed
          - ✅ Auto-labeling applied
          - ✅ Link checking completed
          
          ### Next Steps
          1. Ensure all CI checks pass ✓
          2. Request reviews from team members 👥
          3. Address any feedback 💬
          4. Keep your branch up to date with main 🔄
          
          ---
          
          Need help? Check out our [Contributing Guide](../blob/main/CONTRIBUTING.md)
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: output
            });
          }

